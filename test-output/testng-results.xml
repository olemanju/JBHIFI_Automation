<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="1" ignored="0" total="5" passed="3">
  <reporter-output>
  </reporter-output>
  <suite name="Automation" duration-ms="205934" started-at="2020-04-22T12:10:54Z" finished-at="2020-04-22T12:14:20Z">
    <groups>
    </groups>
    <test name="Smoke Test" duration-ms="205934" started-at="2020-04-22T12:10:54Z" finished-at="2020-04-22T12:14:20Z">
      <class name="com.wip.test.LoginPageTest">
        <test-method status="PASS" signature="setup(java.lang.String)[pri:0, instance:com.wip.test.LoginPageTest@46d56d67]" name="setup" is-config="true" duration-ms="11009" started-at="2020-04-22T17:40:54Z" finished-at="2020-04-22T17:41:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[GC]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="verifyEndtoEndFlowOfPurchasingtheProduct(java.lang.reflect.Method)[pri:0, instance:com.wip.test.LoginPageTest@46d56d67]" name="verifyEndtoEndFlowOfPurchasingtheProduct" duration-ms="53258" started-at="2020-04-22T17:41:05Z" description="Login with Valid User and Search for a product and place an order" finished-at="2020-04-22T17:41:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wip.test.LoginPageTest.verifyEndtoEndFlowOfPurchasingtheProduct(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEndtoEndFlowOfPurchasingtheProduct -->
        <test-method status="PASS" signature="verifySuccessfullLoginFunctionality(java.lang.reflect.Method)[pri:1, instance:com.wip.test.LoginPageTest@46d56d67]" name="verifySuccessfullLoginFunctionality" duration-ms="16881" started-at="2020-04-22T17:41:59Z" description="Verify Succesful Login functionality with valid credentials" finished-at="2020-04-22T17:42:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wip.test.LoginPageTest.verifySuccessfullLoginFunctionality(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySuccessfullLoginFunctionality -->
        <test-method status="PASS" signature="verifyInvalidLoginFunctionality(java.lang.reflect.Method)[pri:2, instance:com.wip.test.LoginPageTest@46d56d67]" name="verifyInvalidLoginFunctionality" duration-ms="18329" started-at="2020-04-22T17:42:15Z" description="Invalid Login Scenario with wrong username and password" finished-at="2020-04-22T17:42:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wip.test.LoginPageTest.verifyInvalidLoginFunctionality(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyInvalidLoginFunctionality -->
        <test-method status="SKIP" signature="verifyTheScreenCaptureFunctionalityForFailedCase(java.lang.reflect.Method)[pri:3, instance:com.wip.test.LoginPageTest@46d56d67]" name="verifyTheScreenCaptureFunctionalityForFailedCase" duration-ms="104548" started-at="2020-04-22T17:42:34Z" description="To verify the screenshot is captured when there is a failure" finished-at="2020-04-22T17:44:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wip.test.LoginPageTest.verifyTheScreenCaptureFunctionalityForFailedCase(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.Exception">
            <message>
              <![CDATA[To verify the screenshot is captured when there is a failure Is FailedError Message  is displayed::truenull]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Exception: To verify the screenshot is captured when there is a failure Is FailedError Message  is displayed::truenull
	at com.wip.test.LoginPageTest.verifyTheScreenCaptureFunctionalityForFailedCase(LoginPageTest.java:263)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Exception -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheScreenCaptureFunctionalityForFailedCase -->
        <test-method status="FAIL" signature="verifyTheScreenCaptureFunctionalityForFailedCase(java.lang.reflect.Method)[pri:3, instance:com.wip.test.LoginPageTest@46d56d67]" name="verifyTheScreenCaptureFunctionalityForFailedCase" duration-ms="16" started-at="2020-04-22T17:44:19Z" description="To verify the screenshot is captured when there is a failure" finished-at="2020-04-22T17:44:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wip.test.LoginPageTest.verifyTheScreenCaptureFunctionalityForFailedCase(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Title of the Page is not Matching expected [JB Hi-Fi - Australia's Largest Home Entertainment Retailer] but found [Account]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Title of the Page is not Matching expected [JB Hi-Fi - Australia's Largest Home Entertainment Retailer] but found [Account]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertEqualsImpl(Assert.java:134)
	at org.testng.Assert.assertEquals(Assert.java:115)
	at org.testng.Assert.assertEquals(Assert.java:189)
	at com.wip.pages.Homepage.verifyHomePageTitle(Homepage.java:38)
	at com.wip.test.LoginPageTest.verifyTheScreenCaptureFunctionalityForFailedCase(LoginPageTest.java:229)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1014)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1215)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheScreenCaptureFunctionalityForFailedCase -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.wip.test.LoginPageTest@46d56d67]" name="tearDown" is-config="true" duration-ms="940" started-at="2020-04-22T17:44:19Z" finished-at="2020-04-22T17:44:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.wip.test.LoginPageTest -->
    </test> <!-- Smoke Test -->
  </suite> <!-- Automation -->
</testng-results>
